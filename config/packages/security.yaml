security:
    encoders:
        # Our user class and the algorithm we'll use to encode passwords
        # https://symfony.com/doc/current/security.html#c-encoding-the-user-s-password
        Adshares\Aduser\Entity\User:
            algorithm: auto
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        custom:
            id: Adshares\Aduser\Security\UserProvider
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: ^/api/
            security: false
        pixel:
            pattern: ^/([a-zA-Z0-9_:.-]{8}|re|fg)/
            security: false
        info:
            pattern: ^/info
            security: false
        main:
            anonymous: true
            guard:
                authenticators:
                    - Adshares\Aduser\Security\LoginFormAuthenticator
            logout:
                path: security_logout
                # where to redirect after logout
                target: index

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/api, roles: ROLE_CLIENT }
        - { path: ^/panel, roles: ROLE_REVIEWER }
        - { path: ^/, roles: ROLE_USER }

    role_hierarchy:
        ROLE_CLIENT: ROLE_USER
        ROLE_REVIEWER: ROLE_USER
        ROLE_ADMIN: [ROLE_CLIENT, ROLE_REVIEWER]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
